cmake_minimum_required(VERSION 3.16)

#
# gpt-j-api


project(gpt4allapi VERSION 0.1.0 LANGUAGES CXX)


set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (NOT XCODE AND NOT MSVC AND NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)


# instruction set specific
option(LLM_AVX                    "llm: enable AVX"                                     ON)
option(LLM_AVX2                   "llm: enable AVX2"                                    ON)
option(LLM_AVX512                 "llm: enable AVX512"                                  OFF)
option(LLM_AVX512_VBMI            "llm: enable AVX512-VBMI"                             OFF)
option(LLM_AVX512_VNNI            "llm: enable AVX512-VNNI"                             OFF)
option(LLM_FMA                    "llm: enable FMA"                                     ON)
# in MSVC F16C is implied with AVX2/AVX512
if (NOT MSVC)
    option(LLM_F16C               "llm: enable F16C"                                    ON)
endif()



if (LLM_LTO)
    include(CheckIPOSupported)
    check_ipo_supported(RESULT result OUTPUT output)
    if (result)
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
    else()
        message(WARNING "IPO is not supported: ${output}")
    endif()
endif()



# Architecture specific
# TODO: probably these flags need to be tweaked on some architectures
#       feel free to update the Makefile for your architecture and send a pull request or issue
message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
if (NOT MSVC)
    if (LLM_STATIC)
        add_link_options(-static)
        if (MINGW)
            add_link_options(-static-libgcc -static-libstdc++)
        endif()
    endif()
    if (LLM_GPROF)
        add_compile_options(-pg)
    endif()
    if (LLM_NATIVE)
        add_compile_options(-march=native)
    endif()
endif()

if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch64")
    message(STATUS "ARM detected")
    if (MSVC)
        # TODO: arm msvc?
    else()
        if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch64")
            add_compile_options(-mcpu=native)
        endif()
        # TODO: armv6,7,8 version specific flags
    endif()
elseif (${CMAKE_SYSTEM_PROCESSOR} MATCHES "^(x86_64|i686|AMD64)$")
    message(STATUS "x86 detected")
    if (MSVC)
        if (LLM_AVX512)
            add_compile_options($<$<COMPILE_LANGUAGE:C>:/arch:AVX512>)
            add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/arch:AVX512>)
            # MSVC has no compile-time flags enabling specific
            # AVX512 extensions, neither it defines the
            # macros corresponding to the extensions.
            # Do it manually.
            if (LLM_AVX512_VBMI)
                add_compile_definitions($<$<COMPILE_LANGUAGE:C>:__AVX512VBMI__>)
                add_compile_definitions($<$<COMPILE_LANGUAGE:CXX>:__AVX512VBMI__>)
            endif()
            if (LLM_AVX512_VNNI)
                add_compile_definitions($<$<COMPILE_LANGUAGE:C>:__AVX512VNNI__>)
                add_compile_definitions($<$<COMPILE_LANGUAGE:CXX>:__AVX512VNNI__>)
            endif()
        elseif (LLM_AVX2)
            add_compile_options($<$<COMPILE_LANGUAGE:C>:/arch:AVX2>)
            add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/arch:AVX2>)
        elseif (LLM_AVX)
            add_compile_options($<$<COMPILE_LANGUAGE:C>:/arch:AVX>)
            add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/arch:AVX>)
        endif()
    else()
        if (LLM_F16C)
            add_compile_options(-mf16c)
        endif()
        if (LLM_FMA)
            add_compile_options(-mfma)
        endif()
        if (LLM_AVX)
            add_compile_options(-mavx)
        endif()
        if (LLM_AVX2)
            add_compile_options(-mavx2)
        endif()
        if (LLM_AVX512)
            add_compile_options(-mavx512f)
            add_compile_options(-mavx512bw)
        endif()
        if (LLM_AVX512_VBMI)
            add_compile_options(-mavx512vbmi)
        endif()
        if (LLM_AVX512_VNNI)
            add_compile_options(-mavx512vnni)
        endif()
    endif()
else()
    # TODO: support PowerPC
    message(STATUS "Unknown architecture")
endif()

add_subdirectory(ggml)
add_subdirectory(Crow)

set(API_TARGET gpt-j-api)
add_executable(${API_TARGET}
main.cpp
utils.h utils.cpp
llmodel.h
gptj.h gptj.cpp
)

target_link_libraries(${API_TARGET} PRIVATE ggml Crow::Crow)

#set(COMPONENT_NAME_MAIN ${PROJECT_NAME})
#install(TARGETS ${TEST_TARGET} DESTINATION bin COMPONENT ${COMPONENT_NAME_MAIN})
